{% extends 'base.html.twig' %}

{% block title %}Material{% endblock %}

{% block content %}
{% if app.user %}

    <div id="material-container" class="content-container">
        <h2 class="text-center">Materialliste</h2>
        <form method="get" id="dateForm">
            <div id="date-select" class="row">
                <div id="date-box" class="col-md-5">
                    <label for="startDate">Start Date:</label>
                    <input id="startDate" type="date" name="startDate"
                        value="{{ app.request.get('startDate') ?: 'now'|date('Y-m-d') }}">
                </div>
                <div id="date-box" class="col-md-5">
                    <label for="endDate">End Date:</label>
                    <input id="endDate" type="date" name="endDate" value="{{ app.request.get('endDate') }}">
                </div>
            </div>
            <button type="submit">Filter</button>
        </form>
        <table>
            <thead>
                <tr>
                    <th>Material</th>
                    <th>Status</th>
                    <th>Menge</th>
                    <th>Verliehen von</th>
                    <th>Verliehen bis</th>
                    <th>Ausleihen</th>
                </tr>
            </thead>
            <tbody>
                {% set start_date = app.request.get('startDate') ?: "now"|date("Y-m-d") %}
                {% set end_date = app.request.get('endDate') ?: "now"|date("Y-m-d") %}

                {% set sorted_items = items|sort((a, b) => a.name <=> b.name) %}

                    {% for item in sorted_items %}
                    {% set is_available_in_range = true %}
                    {% set loan_conflict_found = false %}

                    {% for loan in item.getLoans() %}
                    {% if loan.getStartDate() and loan.getEndDate() and not loan_conflict_found %}
                    {% set loan_start = loan.getStartDate()|date('Y-m-d') %}
                    {% set loan_end = loan.getEndDate()|date('Y-m-d') %}

                    {# If the loan overlaps with selected range #}
                    {% if loan_start <= end_date and loan_end>= start_date %}
                        {% set is_available_in_range = false %}
                        {% set loan_conflict_found = true %}
                        {% endif %}
                        {% endif %}
                        {% endfor %}

                        <tr {% if not is_available_in_range %}class="disabled" {% endif %}>
                            <td>{{ item.name }}</td>
                            <td>{{ is_available_in_range ? 'Verf√ºgbar' : 'Verliehen' }}</td>
                            <td>
                                {% if item.description %}
                                {{ item.description }}
                                {% else %}
                                Keine Beschreibung
                                {% endif %}
                            </td>
                            <td>
                                {% if not is_available_in_range and item.getLoans() is not empty %}
                                {{ item.getLoans()[0].getStartDate()|date("Y-m-d H:i:s") }}
                                {% else %}
                                -
                                {% endif %}
                            </td>
                            <td>
                                {% if not is_available_in_range and item.getLoans() is not empty %}
                                {{ item.getLoans()[0].getEndDate()|date("Y-m-d H:i:s") }}
                                {% else %}
                                -
                                {% endif %}
                            </td>
                            <td>
                                <input type="checkbox" class="loan-checkbox" data-item-id="{{ item.id }}" {% if not
                                    is_available_in_range %}disabled{% endif %}>
                            </td>
                        </tr>
                        {% endfor %}
            </tbody>
        </table>


        <button id="submit-loan">Submit</button>
    </div>

    {% else %}
    not logged in
    {% endif %}
    <script>

        // async function deleteLoans(loanIds) {
        //     try {
        //         const response = await fetch('/api/loan/delete', {
        //             method: 'POST',
        //             headers: {
        //                 'Content-Type': 'application/json',
        //             },
        //             body: JSON.stringify(loanIds),
        //         });
        //
        //         const result = await response.json();
        //         console.log('Deletion Result:', result);
        //     } catch (e) {
        //         console.error('Error deleting loans:', e);
        //     }
        // }

        // deleteLoans("0195f540-334b-726f-a5c2-4c455648b387");


        const submitButton = document.getElementById('submit-loan');
        submitButton.addEventListener("click", async (event) => {
            // Get the selected items (from the checked checkboxes)
            const selectedItems = [];
            document.querySelectorAll('.loan-checkbox:checked').forEach((checkbox) => {
                selectedItems.push(checkbox.getAttribute('data-item-id'));
            });

            if (selectedItems.length === 0) {
                alert('Please select at least one item.');
                return;
            }

            // Get the start and end date values
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;

            // Ensure that both dates are provided
            if (!startDate || !endDate) {
                alert('Please fill in both start and end dates.');
                return;
            }

            // Convert the start and end dates to timestamps
            // const startTimestamp = new Date(startDate).getTime(); // Converts to timestamp in milliseconds
            // const endTimestamp = new Date(endDate).getTime(); // Converts to timestamp in milliseconds

            // Prepare the request body with timestamps
            const requestBody = JSON.stringify([{
                "startDate": startDate,
                "endDate": endDate,
                "items": selectedItems
            }]);

            // Send the data
            await sendData(requestBody);
        });

        async function sendData(requestBody) {
            console.log("Request Body:", requestBody);
           // document.getElementById('request').innerHTML = requestBody;

            try {
                const response = await fetch("/api/loan/create", {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: requestBody
                });

                const serverResponse = await response.json();
                console.log("loan created: " , serverResponse);
              //  document.getElementById('response').innerHTML = JSON.stringify(serverResponse);
            } catch (e) {
                console.error("loan not created: " , e);
              //  document.getElementById('response').innerHTML = JSON.stringify(e);
            }
        }
    </script>
    {% endblock %}



    {% block stylesheets %}
    <style>
        .disabled {
            color: rgb(118, 115, 115);
        }

        .disabled input[type="checkbox"] {
            pointer-events: none;
            opacity: 0.6;
        }

        table {
            width: 100%;
            margin-top: 20px;
            border-radius: 10px;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);

        }

        thead {
            background-color: rgb(182, 180, 180);
        }

        thead th {
            padding: 10px;
            text-align: left;
        }

        tbody tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        td {
            padding: 10px;
            border-bottom: 1px solid #ddd;
        }

        .disabled {
            background-color: #f8d7da !important;
            color: #721c24;
        }

        button {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 10px 15px;
            font-size: 16px;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 15px;
        }

        button:hover {
            background-color: #218838;
        }

        input[type="date"],
        input[type="checkbox"] {
            padding: 5px;
            margin: 5px 0;
        }

        #date-select {
            display: flex;
            justify-content: space-evenly;

            font-weight: bold;
        }

        #date-box {
            background: rgb(182, 180, 180);
            margin: 5px;
            border-radius: 10px;
            box-shadow: 10px 10px 10px rgba(0, 0, 0, 0.1);
            align-items: center;
        }
    </style>
    {% endblock %}